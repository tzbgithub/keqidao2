<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.contract.ContractMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.contract.Contract">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="server_id" jdbcType="BIGINT" property="serverId" />
    <result column="organization_id_party_a" jdbcType="BIGINT" property="organizationIdPartyA" />
    <result column="organization_id_party_b" jdbcType="BIGINT" property="organizationIdPartyB" />
    <result column="member_id_party_a" jdbcType="BIGINT" property="memberIdPartyA" />
    <result column="member_id_part_b" jdbcType="BIGINT" property="memberIdPartB" />
    <result column="no" jdbcType="VARCHAR" property="no" />
    <result column="sign_time" jdbcType="TIMESTAMP" property="signTime" />
    <result column="begin_time" jdbcType="TIMESTAMP" property="beginTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="sign_address_province_id" jdbcType="INTEGER" property="signAddressProvinceId" />
    <result column="sign_address_province_name" jdbcType="VARCHAR" property="signAddressProvinceName" />
    <result column="sign_address_city_id" jdbcType="INTEGER" property="signAddressCityId" />
    <result column="sign_address_city_name" jdbcType="VARCHAR" property="signAddressCityName" />
    <result column="sign_address_area_id" jdbcType="INTEGER" property="signAddressAreaId" />
    <result column="sign_address_area_name" jdbcType="VARCHAR" property="signAddressAreaName" />
    <result column="confirm_time" jdbcType="TIMESTAMP" property="confirmTime" />
    <result column="server_title" jdbcType="VARCHAR" property="serverTitle" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, server_id, organization_id_party_a, 
    organization_id_party_b, member_id_party_a, member_id_part_b, no, sign_time, begin_time, 
    end_time, status, sign_address_province_id, sign_address_province_name, sign_address_city_id, 
    sign_address_city_name, sign_address_area_id, sign_address_area_name, confirm_time, 
    server_title
  </sql>
  <select id="selectByExample" parameterType="com.qidao.application.entity.contract.ContractExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from contract
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from contract
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.contract.ContractExample">
    delete from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.contract.Contract">
    insert into contract (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      server_id, organization_id_party_a, organization_id_party_b, 
      member_id_party_a, member_id_part_b, no, 
      sign_time, begin_time, end_time, 
      status, sign_address_province_id, sign_address_province_name, 
      sign_address_city_id, sign_address_city_name, 
      sign_address_area_id, sign_address_area_name, 
      confirm_time, server_title)
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{serverId,jdbcType=BIGINT}, #{organizationIdPartyA,jdbcType=BIGINT}, #{organizationIdPartyB,jdbcType=BIGINT}, 
      #{memberIdPartyA,jdbcType=BIGINT}, #{memberIdPartB,jdbcType=BIGINT}, #{no,jdbcType=VARCHAR}, 
      #{signTime,jdbcType=TIMESTAMP}, #{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{signAddressProvinceId,jdbcType=INTEGER}, #{signAddressProvinceName,jdbcType=VARCHAR}, 
      #{signAddressCityId,jdbcType=INTEGER}, #{signAddressCityName,jdbcType=VARCHAR}, 
      #{signAddressAreaId,jdbcType=INTEGER}, #{signAddressAreaName,jdbcType=VARCHAR}, 
      #{confirmTime,jdbcType=TIMESTAMP}, #{serverTitle,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into contract
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.serverId != null">
            server_id,
          </if>
          <if test="record.organizationIdPartyA != null">
            organization_id_party_a,
          </if>
          <if test="record.organizationIdPartyB != null">
            organization_id_party_b,
          </if>
          <if test="record.memberIdPartyA != null">
            member_id_party_a,
          </if>
          <if test="record.memberIdPartB != null">
            member_id_part_b,
          </if>
          <if test="record.no != null">
            no,
          </if>
          <if test="record.signTime != null">
            sign_time,
          </if>
          <if test="record.beginTime != null">
            begin_time,
          </if>
          <if test="record.endTime != null">
            end_time,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.signAddressProvinceId != null">
            sign_address_province_id,
          </if>
          <if test="record.signAddressProvinceName != null">
            sign_address_province_name,
          </if>
          <if test="record.signAddressCityId != null">
            sign_address_city_id,
          </if>
          <if test="record.signAddressCityName != null">
            sign_address_city_name,
          </if>
          <if test="record.signAddressAreaId != null">
            sign_address_area_id,
          </if>
          <if test="record.signAddressAreaName != null">
            sign_address_area_name,
          </if>
          <if test="record.confirmTime != null">
            confirm_time,
          </if>
          <if test="record.serverTitle != null">
            server_title,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.serverId != null">
            #{record.serverId,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyA != null">
            #{record.organizationIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyB != null">
            #{record.organizationIdPartyB,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartyA != null">
            #{record.memberIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartB != null">
            #{record.memberIdPartB,jdbcType=BIGINT},
          </if>
          <if test="record.no != null">
            #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.signTime != null">
            #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.beginTime != null">
            #{record.beginTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.endTime != null">
            #{record.endTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceId != null">
            #{record.signAddressProvinceId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceName != null">
            #{record.signAddressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressCityId != null">
            #{record.signAddressCityId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressCityName != null">
            #{record.signAddressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressAreaId != null">
            #{record.signAddressAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressAreaName != null">
            #{record.signAddressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.confirmTime != null">
            #{record.confirmTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.serverTitle != null">
            #{record.serverTitle,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.contract.ContractExample" resultType="java.lang.Long">
    select count(*) from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update contract
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.serverId != null">
            server_id = #{record.serverId,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyA != null">
            organization_id_party_a = #{record.organizationIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyB != null">
            organization_id_party_b = #{record.organizationIdPartyB,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartyA != null">
            member_id_party_a = #{record.memberIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartB != null">
            member_id_part_b = #{record.memberIdPartB,jdbcType=BIGINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.signTime != null">
            sign_time = #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.beginTime != null">
            begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.endTime != null">
            end_time = #{record.endTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceId != null">
            sign_address_province_id = #{record.signAddressProvinceId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceName != null">
            sign_address_province_name = #{record.signAddressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressCityId != null">
            sign_address_city_id = #{record.signAddressCityId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressCityName != null">
            sign_address_city_name = #{record.signAddressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressAreaId != null">
            sign_address_area_id = #{record.signAddressAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressAreaName != null">
            sign_address_area_name = #{record.signAddressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.confirmTime != null">
            confirm_time = #{record.confirmTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.serverTitle != null">
            server_title = #{record.serverTitle,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update contract
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      server_id = #{record.serverId,jdbcType=BIGINT},
      organization_id_party_a = #{record.organizationIdPartyA,jdbcType=BIGINT},
      organization_id_party_b = #{record.organizationIdPartyB,jdbcType=BIGINT},
      member_id_party_a = #{record.memberIdPartyA,jdbcType=BIGINT},
      member_id_part_b = #{record.memberIdPartB,jdbcType=BIGINT},
      no = #{record.no,jdbcType=VARCHAR},
      sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      sign_address_province_id = #{record.signAddressProvinceId,jdbcType=INTEGER},
      sign_address_province_name = #{record.signAddressProvinceName,jdbcType=VARCHAR},
      sign_address_city_id = #{record.signAddressCityId,jdbcType=INTEGER},
      sign_address_city_name = #{record.signAddressCityName,jdbcType=VARCHAR},
      sign_address_area_id = #{record.signAddressAreaId,jdbcType=INTEGER},
      sign_address_area_name = #{record.signAddressAreaName,jdbcType=VARCHAR},
      confirm_time = #{record.confirmTime,jdbcType=TIMESTAMP},
      server_title = #{record.serverTitle,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update contract
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.serverId != null">
            server_id = #{record.serverId,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyA != null">
            organization_id_party_a = #{record.organizationIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.organizationIdPartyB != null">
            organization_id_party_b = #{record.organizationIdPartyB,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartyA != null">
            member_id_party_a = #{record.memberIdPartyA,jdbcType=BIGINT},
          </if>
          <if test="record.memberIdPartB != null">
            member_id_part_b = #{record.memberIdPartB,jdbcType=BIGINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.signTime != null">
            sign_time = #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.beginTime != null">
            begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.endTime != null">
            end_time = #{record.endTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceId != null">
            sign_address_province_id = #{record.signAddressProvinceId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressProvinceName != null">
            sign_address_province_name = #{record.signAddressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressCityId != null">
            sign_address_city_id = #{record.signAddressCityId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressCityName != null">
            sign_address_city_name = #{record.signAddressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.signAddressAreaId != null">
            sign_address_area_id = #{record.signAddressAreaId,jdbcType=INTEGER},
          </if>
          <if test="record.signAddressAreaName != null">
            sign_address_area_name = #{record.signAddressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.confirmTime != null">
            confirm_time = #{record.confirmTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.serverTitle != null">
            server_title = #{record.serverTitle,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.contract.Contract">
    update contract
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      server_id = #{serverId,jdbcType=BIGINT},
      organization_id_party_a = #{organizationIdPartyA,jdbcType=BIGINT},
      organization_id_party_b = #{organizationIdPartyB,jdbcType=BIGINT},
      member_id_party_a = #{memberIdPartyA,jdbcType=BIGINT},
      member_id_part_b = #{memberIdPartB,jdbcType=BIGINT},
      no = #{no,jdbcType=VARCHAR},
      sign_time = #{signTime,jdbcType=TIMESTAMP},
      begin_time = #{beginTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      sign_address_province_id = #{signAddressProvinceId,jdbcType=INTEGER},
      sign_address_province_name = #{signAddressProvinceName,jdbcType=VARCHAR},
      sign_address_city_id = #{signAddressCityId,jdbcType=INTEGER},
      sign_address_city_name = #{signAddressCityName,jdbcType=VARCHAR},
      sign_address_area_id = #{signAddressAreaId,jdbcType=INTEGER},
      sign_address_area_name = #{signAddressAreaName,jdbcType=VARCHAR},
      confirm_time = #{confirmTime,jdbcType=TIMESTAMP},
      server_title = #{serverTitle,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.contract.ContractExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from contract
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into contract
    (id, create_time, update_time, create_by, update_by, del_flag, server_id, organization_id_party_a, 
      organization_id_party_b, member_id_party_a, member_id_part_b, no, sign_time, begin_time, 
      end_time, status, sign_address_province_id, sign_address_province_name, sign_address_city_id, 
      sign_address_city_name, sign_address_area_id, sign_address_area_name, confirm_time, 
      server_title)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.serverId,jdbcType=BIGINT}, #{item.organizationIdPartyA,jdbcType=BIGINT}, 
        #{item.organizationIdPartyB,jdbcType=BIGINT}, #{item.memberIdPartyA,jdbcType=BIGINT}, 
        #{item.memberIdPartB,jdbcType=BIGINT}, #{item.no,jdbcType=VARCHAR}, #{item.signTime,jdbcType=TIMESTAMP}, 
        #{item.beginTime,jdbcType=TIMESTAMP}, #{item.endTime,jdbcType=TIMESTAMP}, #{item.status,jdbcType=INTEGER}, 
        #{item.signAddressProvinceId,jdbcType=INTEGER}, #{item.signAddressProvinceName,jdbcType=VARCHAR}, 
        #{item.signAddressCityId,jdbcType=INTEGER}, #{item.signAddressCityName,jdbcType=VARCHAR}, 
        #{item.signAddressAreaId,jdbcType=INTEGER}, #{item.signAddressAreaName,jdbcType=VARCHAR}, 
        #{item.confirmTime,jdbcType=TIMESTAMP}, #{item.serverTitle,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into contract (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'server_id'.toString() == column.value">
          #{item.serverId,jdbcType=BIGINT}
        </if>
        <if test="'organization_id_party_a'.toString() == column.value">
          #{item.organizationIdPartyA,jdbcType=BIGINT}
        </if>
        <if test="'organization_id_party_b'.toString() == column.value">
          #{item.organizationIdPartyB,jdbcType=BIGINT}
        </if>
        <if test="'member_id_party_a'.toString() == column.value">
          #{item.memberIdPartyA,jdbcType=BIGINT}
        </if>
        <if test="'member_id_part_b'.toString() == column.value">
          #{item.memberIdPartB,jdbcType=BIGINT}
        </if>
        <if test="'no'.toString() == column.value">
          #{item.no,jdbcType=VARCHAR}
        </if>
        <if test="'sign_time'.toString() == column.value">
          #{item.signTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'begin_time'.toString() == column.value">
          #{item.beginTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'end_time'.toString() == column.value">
          #{item.endTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'sign_address_province_id'.toString() == column.value">
          #{item.signAddressProvinceId,jdbcType=INTEGER}
        </if>
        <if test="'sign_address_province_name'.toString() == column.value">
          #{item.signAddressProvinceName,jdbcType=VARCHAR}
        </if>
        <if test="'sign_address_city_id'.toString() == column.value">
          #{item.signAddressCityId,jdbcType=INTEGER}
        </if>
        <if test="'sign_address_city_name'.toString() == column.value">
          #{item.signAddressCityName,jdbcType=VARCHAR}
        </if>
        <if test="'sign_address_area_id'.toString() == column.value">
          #{item.signAddressAreaId,jdbcType=INTEGER}
        </if>
        <if test="'sign_address_area_name'.toString() == column.value">
          #{item.signAddressAreaName,jdbcType=VARCHAR}
        </if>
        <if test="'confirm_time'.toString() == column.value">
          #{item.confirmTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'server_title'.toString() == column.value">
          #{item.serverTitle,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>