<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.order.OrderMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.order.Order">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="no" jdbcType="BIGINT" property="no" />
    <result column="product_sku_id" jdbcType="BIGINT" property="productSkuId" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="pay_price" jdbcType="DECIMAL" property="payPrice" />
    <result column="order_price" jdbcType="DECIMAL" property="orderPrice" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="pay_way" jdbcType="INTEGER" property="payWay" />
    <result column="product_sku_name" jdbcType="VARCHAR" property="productSkuName" />
    <result column="vip_start_time" jdbcType="TIMESTAMP" property="vipStartTime" />
    <result column="vip_end_time" jdbcType="TIMESTAMP" property="vipEndTime" />
    <result column="physical_flag" jdbcType="TINYINT" property="physicalFlag" />
    <result column="third_order_no" jdbcType="VARCHAR" property="thirdOrderNo" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, no, product_sku_id, 
    member_id, status, member_name, pay_time, pay_price, order_price, quantity, pay_way, 
    product_sku_name, vip_start_time, vip_end_time, physical_flag, third_order_no
  </sql>
  <select id="selectByExample" parameterType="com.qidao.application.entity.order.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from order
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.order.OrderExample">
    delete from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.order.Order">
    insert into order (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      no, product_sku_id, member_id, 
      status, member_name, pay_time, 
      pay_price, order_price, quantity, 
      pay_way, product_sku_name, vip_start_time, 
      vip_end_time, physical_flag, third_order_no
      )
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{no,jdbcType=BIGINT}, #{productSkuId,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR}, #{payTime,jdbcType=TIMESTAMP}, 
      #{payPrice,jdbcType=DECIMAL}, #{orderPrice,jdbcType=DECIMAL}, #{quantity,jdbcType=INTEGER}, 
      #{payWay,jdbcType=INTEGER}, #{productSkuName,jdbcType=VARCHAR}, #{vipStartTime,jdbcType=TIMESTAMP}, 
      #{vipEndTime,jdbcType=TIMESTAMP}, #{physicalFlag,jdbcType=TINYINT}, #{thirdOrderNo,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into order
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.no != null">
            no,
          </if>
          <if test="record.productSkuId != null">
            product_sku_id,
          </if>
          <if test="record.memberId != null">
            member_id,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.memberName != null">
            member_name,
          </if>
          <if test="record.payTime != null">
            pay_time,
          </if>
          <if test="record.payPrice != null">
            pay_price,
          </if>
          <if test="record.orderPrice != null">
            order_price,
          </if>
          <if test="record.quantity != null">
            quantity,
          </if>
          <if test="record.payWay != null">
            pay_way,
          </if>
          <if test="record.productSkuName != null">
            product_sku_name,
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time,
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time,
          </if>
          <if test="record.physicalFlag != null">
            physical_flag,
          </if>
          <if test="record.thirdOrderNo != null">
            third_order_no,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            #{record.no,jdbcType=BIGINT},
          </if>
          <if test="record.productSkuId != null">
            #{record.productSkuId,jdbcType=BIGINT},
          </if>
          <if test="record.memberId != null">
            #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.memberName != null">
            #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.payTime != null">
            #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payPrice != null">
            #{record.payPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.orderPrice != null">
            #{record.orderPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.quantity != null">
            #{record.quantity,jdbcType=INTEGER},
          </if>
          <if test="record.payWay != null">
            #{record.payWay,jdbcType=INTEGER},
          </if>
          <if test="record.productSkuName != null">
            #{record.productSkuName,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.physicalFlag != null">
            #{record.physicalFlag,jdbcType=TINYINT},
          </if>
          <if test="record.thirdOrderNo != null">
            #{record.thirdOrderNo,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.order.OrderExample" resultType="java.lang.Long">
    select count(*) from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=BIGINT},
          </if>
          <if test="record.productSkuId != null">
            product_sku_id = #{record.productSkuId,jdbcType=BIGINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.memberName != null">
            member_name = #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.payTime != null">
            pay_time = #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payPrice != null">
            pay_price = #{record.payPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.orderPrice != null">
            order_price = #{record.orderPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.quantity != null">
            quantity = #{record.quantity,jdbcType=INTEGER},
          </if>
          <if test="record.payWay != null">
            pay_way = #{record.payWay,jdbcType=INTEGER},
          </if>
          <if test="record.productSkuName != null">
            product_sku_name = #{record.productSkuName,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.physicalFlag != null">
            physical_flag = #{record.physicalFlag,jdbcType=TINYINT},
          </if>
          <if test="record.thirdOrderNo != null">
            third_order_no = #{record.thirdOrderNo,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      no = #{record.no,jdbcType=BIGINT},
      product_sku_id = #{record.productSkuId,jdbcType=BIGINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      status = #{record.status,jdbcType=INTEGER},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      pay_price = #{record.payPrice,jdbcType=DECIMAL},
      order_price = #{record.orderPrice,jdbcType=DECIMAL},
      quantity = #{record.quantity,jdbcType=INTEGER},
      pay_way = #{record.payWay,jdbcType=INTEGER},
      product_sku_name = #{record.productSkuName,jdbcType=VARCHAR},
      vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
      physical_flag = #{record.physicalFlag,jdbcType=TINYINT},
      third_order_no = #{record.thirdOrderNo,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update order
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=BIGINT},
          </if>
          <if test="record.productSkuId != null">
            product_sku_id = #{record.productSkuId,jdbcType=BIGINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.memberName != null">
            member_name = #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.payTime != null">
            pay_time = #{record.payTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.payPrice != null">
            pay_price = #{record.payPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.orderPrice != null">
            order_price = #{record.orderPrice,jdbcType=DECIMAL},
          </if>
          <if test="record.quantity != null">
            quantity = #{record.quantity,jdbcType=INTEGER},
          </if>
          <if test="record.payWay != null">
            pay_way = #{record.payWay,jdbcType=INTEGER},
          </if>
          <if test="record.productSkuName != null">
            product_sku_name = #{record.productSkuName,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.physicalFlag != null">
            physical_flag = #{record.physicalFlag,jdbcType=TINYINT},
          </if>
          <if test="record.thirdOrderNo != null">
            third_order_no = #{record.thirdOrderNo,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.order.Order">
    update order
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      no = #{no,jdbcType=BIGINT},
      product_sku_id = #{productSkuId,jdbcType=BIGINT},
      member_id = #{memberId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      member_name = #{memberName,jdbcType=VARCHAR},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      pay_price = #{payPrice,jdbcType=DECIMAL},
      order_price = #{orderPrice,jdbcType=DECIMAL},
      quantity = #{quantity,jdbcType=INTEGER},
      pay_way = #{payWay,jdbcType=INTEGER},
      product_sku_name = #{productSkuName,jdbcType=VARCHAR},
      vip_start_time = #{vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{vipEndTime,jdbcType=TIMESTAMP},
      physical_flag = #{physicalFlag,jdbcType=TINYINT},
      third_order_no = #{thirdOrderNo,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.order.OrderExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into order
    (id, create_time, update_time, create_by, update_by, del_flag, no, product_sku_id, 
      member_id, status, member_name, pay_time, pay_price, order_price, quantity, pay_way, 
      product_sku_name, vip_start_time, vip_end_time, physical_flag, third_order_no)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.no,jdbcType=BIGINT}, #{item.productSkuId,jdbcType=BIGINT}, #{item.memberId,jdbcType=BIGINT}, 
        #{item.status,jdbcType=INTEGER}, #{item.memberName,jdbcType=VARCHAR}, #{item.payTime,jdbcType=TIMESTAMP}, 
        #{item.payPrice,jdbcType=DECIMAL}, #{item.orderPrice,jdbcType=DECIMAL}, #{item.quantity,jdbcType=INTEGER}, 
        #{item.payWay,jdbcType=INTEGER}, #{item.productSkuName,jdbcType=VARCHAR}, #{item.vipStartTime,jdbcType=TIMESTAMP}, 
        #{item.vipEndTime,jdbcType=TIMESTAMP}, #{item.physicalFlag,jdbcType=TINYINT}, #{item.thirdOrderNo,jdbcType=VARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into order (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'no'.toString() == column.value">
          #{item.no,jdbcType=BIGINT}
        </if>
        <if test="'product_sku_id'.toString() == column.value">
          #{item.productSkuId,jdbcType=BIGINT}
        </if>
        <if test="'member_id'.toString() == column.value">
          #{item.memberId,jdbcType=BIGINT}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'member_name'.toString() == column.value">
          #{item.memberName,jdbcType=VARCHAR}
        </if>
        <if test="'pay_time'.toString() == column.value">
          #{item.payTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'pay_price'.toString() == column.value">
          #{item.payPrice,jdbcType=DECIMAL}
        </if>
        <if test="'order_price'.toString() == column.value">
          #{item.orderPrice,jdbcType=DECIMAL}
        </if>
        <if test="'quantity'.toString() == column.value">
          #{item.quantity,jdbcType=INTEGER}
        </if>
        <if test="'pay_way'.toString() == column.value">
          #{item.payWay,jdbcType=INTEGER}
        </if>
        <if test="'product_sku_name'.toString() == column.value">
          #{item.productSkuName,jdbcType=VARCHAR}
        </if>
        <if test="'vip_start_time'.toString() == column.value">
          #{item.vipStartTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'vip_end_time'.toString() == column.value">
          #{item.vipEndTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'physical_flag'.toString() == column.value">
          #{item.physicalFlag,jdbcType=TINYINT}
        </if>
        <if test="'third_order_no'.toString() == column.value">
          #{item.thirdOrderNo,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>