<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.organization.OrganizationMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.organization.Organization">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="responsible_member_id" jdbcType="BIGINT" property="responsibleMemberId" />
    <result column="backend_image" jdbcType="VARCHAR" property="backendImage" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="summary" jdbcType="VARCHAR" property="summary" />
    <result column="industry_id" jdbcType="BIGINT" property="industryId" />
    <result column="industry_remark" jdbcType="VARCHAR" property="industryRemark" />
    <result column="funds_id" jdbcType="VARCHAR" property="fundsId" />
    <result column="scale_id" jdbcType="BIGINT" property="scaleId" />
    <result column="sign_time" jdbcType="TIMESTAMP" property="signTime" />
    <result column="license" jdbcType="VARCHAR" property="license" />
    <result column="qualifications" jdbcType="VARCHAR" property="qualifications" />
    <result column="address_province_id" jdbcType="VARCHAR" property="addressProvinceId" />
    <result column="address_province_name" jdbcType="VARCHAR" property="addressProvinceName" />
    <result column="address_city_id" jdbcType="VARCHAR" property="addressCityId" />
    <result column="address_city_name" jdbcType="VARCHAR" property="addressCityName" />
    <result column="address_area_id" jdbcType="VARCHAR" property="addressAreaId" />
    <result column="address_area_name" jdbcType="VARCHAR" property="addressAreaName" />
    <result column="address_detail" jdbcType="VARCHAR" property="addressDetail" />
    <result column="tech_scale_id" jdbcType="BIGINT" property="techScaleId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="vip_start_time" jdbcType="TIMESTAMP" property="vipStartTime" />
    <result column="vip_end_time" jdbcType="TIMESTAMP" property="vipEndTime" />
    <result column="verify_status" jdbcType="INTEGER" property="verifyStatus" />
    <result column="verify_reason" jdbcType="VARCHAR" property="verifyReason" />
    <result column="belong" jdbcType="VARCHAR" property="belong" />
    <result column="salesman_id" jdbcType="BIGINT" property="salesmanId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, type, responsible_member_id, 
    backend_image, name, summary, industry_id, industry_remark, funds_id, scale_id, sign_time, 
    license, qualifications, address_province_id, address_province_name, address_city_id, 
    address_city_name, address_area_id, address_area_name, address_detail, tech_scale_id, 
    status, vip_start_time, vip_end_time, verify_status, verify_reason, belong, salesman_id
  </sql>
  <select id="selectByExample" parameterType="com.qidao.application.entity.organization.OrganizationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from organization
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from organization
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.organization.OrganizationExample">
    delete from organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.organization.Organization">
    insert into organization (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      type, responsible_member_id, backend_image, 
      name, summary, industry_id, 
      industry_remark, funds_id, scale_id, 
      sign_time, license, qualifications, 
      address_province_id, address_province_name, 
      address_city_id, address_city_name, address_area_id, 
      address_area_name, address_detail, tech_scale_id, 
      status, vip_start_time, vip_end_time, 
      verify_status, verify_reason, belong, 
      salesman_id)
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{type,jdbcType=INTEGER}, #{responsibleMemberId,jdbcType=BIGINT}, #{backendImage,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{summary,jdbcType=VARCHAR}, #{industryId,jdbcType=BIGINT}, 
      #{industryRemark,jdbcType=VARCHAR}, #{fundsId,jdbcType=VARCHAR}, #{scaleId,jdbcType=BIGINT}, 
      #{signTime,jdbcType=TIMESTAMP}, #{license,jdbcType=VARCHAR}, #{qualifications,jdbcType=VARCHAR}, 
      #{addressProvinceId,jdbcType=VARCHAR}, #{addressProvinceName,jdbcType=VARCHAR}, 
      #{addressCityId,jdbcType=VARCHAR}, #{addressCityName,jdbcType=VARCHAR}, #{addressAreaId,jdbcType=VARCHAR}, 
      #{addressAreaName,jdbcType=VARCHAR}, #{addressDetail,jdbcType=VARCHAR}, #{techScaleId,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{vipStartTime,jdbcType=TIMESTAMP}, #{vipEndTime,jdbcType=TIMESTAMP}, 
      #{verifyStatus,jdbcType=INTEGER}, #{verifyReason,jdbcType=VARCHAR}, #{belong,jdbcType=VARCHAR}, 
      #{salesmanId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into organization
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.type != null">
            type,
          </if>
          <if test="record.responsibleMemberId != null">
            responsible_member_id,
          </if>
          <if test="record.backendImage != null">
            backend_image,
          </if>
          <if test="record.name != null">
            name,
          </if>
          <if test="record.summary != null">
            summary,
          </if>
          <if test="record.industryId != null">
            industry_id,
          </if>
          <if test="record.industryRemark != null">
            industry_remark,
          </if>
          <if test="record.fundsId != null">
            funds_id,
          </if>
          <if test="record.scaleId != null">
            scale_id,
          </if>
          <if test="record.signTime != null">
            sign_time,
          </if>
          <if test="record.license != null">
            license,
          </if>
          <if test="record.qualifications != null">
            qualifications,
          </if>
          <if test="record.addressProvinceId != null">
            address_province_id,
          </if>
          <if test="record.addressProvinceName != null">
            address_province_name,
          </if>
          <if test="record.addressCityId != null">
            address_city_id,
          </if>
          <if test="record.addressCityName != null">
            address_city_name,
          </if>
          <if test="record.addressAreaId != null">
            address_area_id,
          </if>
          <if test="record.addressAreaName != null">
            address_area_name,
          </if>
          <if test="record.addressDetail != null">
            address_detail,
          </if>
          <if test="record.techScaleId != null">
            tech_scale_id,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time,
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time,
          </if>
          <if test="record.verifyStatus != null">
            verify_status,
          </if>
          <if test="record.verifyReason != null">
            verify_reason,
          </if>
          <if test="record.belong != null">
            belong,
          </if>
          <if test="record.salesmanId != null">
            salesman_id,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.responsibleMemberId != null">
            #{record.responsibleMemberId,jdbcType=BIGINT},
          </if>
          <if test="record.backendImage != null">
            #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.summary != null">
            #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.industryId != null">
            #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.industryRemark != null">
            #{record.industryRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.fundsId != null">
            #{record.fundsId,jdbcType=VARCHAR},
          </if>
          <if test="record.scaleId != null">
            #{record.scaleId,jdbcType=BIGINT},
          </if>
          <if test="record.signTime != null">
            #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.license != null">
            #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceId != null">
            #{record.addressProvinceId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceName != null">
            #{record.addressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityId != null">
            #{record.addressCityId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityName != null">
            #{record.addressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaId != null">
            #{record.addressAreaId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaName != null">
            #{record.addressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressDetail != null">
            #{record.addressDetail,jdbcType=VARCHAR},
          </if>
          <if test="record.techScaleId != null">
            #{record.techScaleId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.vipStartTime != null">
            #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.verifyStatus != null">
            #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.belong != null">
            #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.salesmanId != null">
            #{record.salesmanId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.organization.OrganizationExample" resultType="java.lang.Long">
    select count(*) from organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update organization
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.type != null">
            type = #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.responsibleMemberId != null">
            responsible_member_id = #{record.responsibleMemberId,jdbcType=BIGINT},
          </if>
          <if test="record.backendImage != null">
            backend_image = #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.summary != null">
            summary = #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.industryId != null">
            industry_id = #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.industryRemark != null">
            industry_remark = #{record.industryRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.fundsId != null">
            funds_id = #{record.fundsId,jdbcType=VARCHAR},
          </if>
          <if test="record.scaleId != null">
            scale_id = #{record.scaleId,jdbcType=BIGINT},
          </if>
          <if test="record.signTime != null">
            sign_time = #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.license != null">
            license = #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            qualifications = #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceId != null">
            address_province_id = #{record.addressProvinceId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceName != null">
            address_province_name = #{record.addressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityId != null">
            address_city_id = #{record.addressCityId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityName != null">
            address_city_name = #{record.addressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaId != null">
            address_area_id = #{record.addressAreaId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaName != null">
            address_area_name = #{record.addressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressDetail != null">
            address_detail = #{record.addressDetail,jdbcType=VARCHAR},
          </if>
          <if test="record.techScaleId != null">
            tech_scale_id = #{record.techScaleId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.belong != null">
            belong = #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.salesmanId != null">
            salesman_id = #{record.salesmanId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update organization
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      type = #{record.type,jdbcType=INTEGER},
      responsible_member_id = #{record.responsibleMemberId,jdbcType=BIGINT},
      backend_image = #{record.backendImage,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      summary = #{record.summary,jdbcType=VARCHAR},
      industry_id = #{record.industryId,jdbcType=BIGINT},
      industry_remark = #{record.industryRemark,jdbcType=VARCHAR},
      funds_id = #{record.fundsId,jdbcType=VARCHAR},
      scale_id = #{record.scaleId,jdbcType=BIGINT},
      sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      license = #{record.license,jdbcType=VARCHAR},
      qualifications = #{record.qualifications,jdbcType=VARCHAR},
      address_province_id = #{record.addressProvinceId,jdbcType=VARCHAR},
      address_province_name = #{record.addressProvinceName,jdbcType=VARCHAR},
      address_city_id = #{record.addressCityId,jdbcType=VARCHAR},
      address_city_name = #{record.addressCityName,jdbcType=VARCHAR},
      address_area_id = #{record.addressAreaId,jdbcType=VARCHAR},
      address_area_name = #{record.addressAreaName,jdbcType=VARCHAR},
      address_detail = #{record.addressDetail,jdbcType=VARCHAR},
      tech_scale_id = #{record.techScaleId,jdbcType=BIGINT},
      status = #{record.status,jdbcType=INTEGER},
      vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      belong = #{record.belong,jdbcType=VARCHAR},
      salesman_id = #{record.salesmanId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update organization
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.type != null">
            type = #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.responsibleMemberId != null">
            responsible_member_id = #{record.responsibleMemberId,jdbcType=BIGINT},
          </if>
          <if test="record.backendImage != null">
            backend_image = #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.summary != null">
            summary = #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.industryId != null">
            industry_id = #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.industryRemark != null">
            industry_remark = #{record.industryRemark,jdbcType=VARCHAR},
          </if>
          <if test="record.fundsId != null">
            funds_id = #{record.fundsId,jdbcType=VARCHAR},
          </if>
          <if test="record.scaleId != null">
            scale_id = #{record.scaleId,jdbcType=BIGINT},
          </if>
          <if test="record.signTime != null">
            sign_time = #{record.signTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.license != null">
            license = #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            qualifications = #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceId != null">
            address_province_id = #{record.addressProvinceId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressProvinceName != null">
            address_province_name = #{record.addressProvinceName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityId != null">
            address_city_id = #{record.addressCityId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressCityName != null">
            address_city_name = #{record.addressCityName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaId != null">
            address_area_id = #{record.addressAreaId,jdbcType=VARCHAR},
          </if>
          <if test="record.addressAreaName != null">
            address_area_name = #{record.addressAreaName,jdbcType=VARCHAR},
          </if>
          <if test="record.addressDetail != null">
            address_detail = #{record.addressDetail,jdbcType=VARCHAR},
          </if>
          <if test="record.techScaleId != null">
            tech_scale_id = #{record.techScaleId,jdbcType=BIGINT},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.belong != null">
            belong = #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.salesmanId != null">
            salesman_id = #{record.salesmanId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.organization.Organization">
    update organization
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      type = #{type,jdbcType=INTEGER},
      responsible_member_id = #{responsibleMemberId,jdbcType=BIGINT},
      backend_image = #{backendImage,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      summary = #{summary,jdbcType=VARCHAR},
      industry_id = #{industryId,jdbcType=BIGINT},
      industry_remark = #{industryRemark,jdbcType=VARCHAR},
      funds_id = #{fundsId,jdbcType=VARCHAR},
      scale_id = #{scaleId,jdbcType=BIGINT},
      sign_time = #{signTime,jdbcType=TIMESTAMP},
      license = #{license,jdbcType=VARCHAR},
      qualifications = #{qualifications,jdbcType=VARCHAR},
      address_province_id = #{addressProvinceId,jdbcType=VARCHAR},
      address_province_name = #{addressProvinceName,jdbcType=VARCHAR},
      address_city_id = #{addressCityId,jdbcType=VARCHAR},
      address_city_name = #{addressCityName,jdbcType=VARCHAR},
      address_area_id = #{addressAreaId,jdbcType=VARCHAR},
      address_area_name = #{addressAreaName,jdbcType=VARCHAR},
      address_detail = #{addressDetail,jdbcType=VARCHAR},
      tech_scale_id = #{techScaleId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      vip_start_time = #{vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{vipEndTime,jdbcType=TIMESTAMP},
      verify_status = #{verifyStatus,jdbcType=INTEGER},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      belong = #{belong,jdbcType=VARCHAR},
      salesman_id = #{salesmanId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.organization.OrganizationExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from organization
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into organization
    (id, create_time, update_time, create_by, update_by, del_flag, type, responsible_member_id, 
      backend_image, name, summary, industry_id, industry_remark, funds_id, scale_id, 
      sign_time, license, qualifications, address_province_id, address_province_name, 
      address_city_id, address_city_name, address_area_id, address_area_name, address_detail, 
      tech_scale_id, status, vip_start_time, vip_end_time, verify_status, verify_reason, 
      belong, salesman_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.type,jdbcType=INTEGER}, #{item.responsibleMemberId,jdbcType=BIGINT}, #{item.backendImage,jdbcType=VARCHAR}, 
        #{item.name,jdbcType=VARCHAR}, #{item.summary,jdbcType=VARCHAR}, #{item.industryId,jdbcType=BIGINT}, 
        #{item.industryRemark,jdbcType=VARCHAR}, #{item.fundsId,jdbcType=VARCHAR}, #{item.scaleId,jdbcType=BIGINT}, 
        #{item.signTime,jdbcType=TIMESTAMP}, #{item.license,jdbcType=VARCHAR}, #{item.qualifications,jdbcType=VARCHAR}, 
        #{item.addressProvinceId,jdbcType=VARCHAR}, #{item.addressProvinceName,jdbcType=VARCHAR}, 
        #{item.addressCityId,jdbcType=VARCHAR}, #{item.addressCityName,jdbcType=VARCHAR}, 
        #{item.addressAreaId,jdbcType=VARCHAR}, #{item.addressAreaName,jdbcType=VARCHAR}, 
        #{item.addressDetail,jdbcType=VARCHAR}, #{item.techScaleId,jdbcType=BIGINT}, #{item.status,jdbcType=INTEGER}, 
        #{item.vipStartTime,jdbcType=TIMESTAMP}, #{item.vipEndTime,jdbcType=TIMESTAMP}, 
        #{item.verifyStatus,jdbcType=INTEGER}, #{item.verifyReason,jdbcType=VARCHAR}, #{item.belong,jdbcType=VARCHAR}, 
        #{item.salesmanId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into organization (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=INTEGER}
        </if>
        <if test="'responsible_member_id'.toString() == column.value">
          #{item.responsibleMemberId,jdbcType=BIGINT}
        </if>
        <if test="'backend_image'.toString() == column.value">
          #{item.backendImage,jdbcType=VARCHAR}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'summary'.toString() == column.value">
          #{item.summary,jdbcType=VARCHAR}
        </if>
        <if test="'industry_id'.toString() == column.value">
          #{item.industryId,jdbcType=BIGINT}
        </if>
        <if test="'industry_remark'.toString() == column.value">
          #{item.industryRemark,jdbcType=VARCHAR}
        </if>
        <if test="'funds_id'.toString() == column.value">
          #{item.fundsId,jdbcType=VARCHAR}
        </if>
        <if test="'scale_id'.toString() == column.value">
          #{item.scaleId,jdbcType=BIGINT}
        </if>
        <if test="'sign_time'.toString() == column.value">
          #{item.signTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'license'.toString() == column.value">
          #{item.license,jdbcType=VARCHAR}
        </if>
        <if test="'qualifications'.toString() == column.value">
          #{item.qualifications,jdbcType=VARCHAR}
        </if>
        <if test="'address_province_id'.toString() == column.value">
          #{item.addressProvinceId,jdbcType=VARCHAR}
        </if>
        <if test="'address_province_name'.toString() == column.value">
          #{item.addressProvinceName,jdbcType=VARCHAR}
        </if>
        <if test="'address_city_id'.toString() == column.value">
          #{item.addressCityId,jdbcType=VARCHAR}
        </if>
        <if test="'address_city_name'.toString() == column.value">
          #{item.addressCityName,jdbcType=VARCHAR}
        </if>
        <if test="'address_area_id'.toString() == column.value">
          #{item.addressAreaId,jdbcType=VARCHAR}
        </if>
        <if test="'address_area_name'.toString() == column.value">
          #{item.addressAreaName,jdbcType=VARCHAR}
        </if>
        <if test="'address_detail'.toString() == column.value">
          #{item.addressDetail,jdbcType=VARCHAR}
        </if>
        <if test="'tech_scale_id'.toString() == column.value">
          #{item.techScaleId,jdbcType=BIGINT}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'vip_start_time'.toString() == column.value">
          #{item.vipStartTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'vip_end_time'.toString() == column.value">
          #{item.vipEndTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'verify_status'.toString() == column.value">
          #{item.verifyStatus,jdbcType=INTEGER}
        </if>
        <if test="'verify_reason'.toString() == column.value">
          #{item.verifyReason,jdbcType=VARCHAR}
        </if>
        <if test="'belong'.toString() == column.value">
          #{item.belong,jdbcType=VARCHAR}
        </if>
        <if test="'salesman_id'.toString() == column.value">
          #{item.salesmanId,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>

    <select id="getOrganStaus" resultType="java.lang.Long">
       SELECT DISTINCT
       organ.verify_status
       FROM
       member m
       LEFT JOIN organization organ ON m.organization_id = organ.id
       AND organ.del_flag = 0
       where m.id=#{memberId}



    </select>
</mapper>