<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.dynamic.DynamicMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.dynamic.Dynamic">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="publish_time" jdbcType="TIMESTAMP" property="publishTime" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="video" jdbcType="VARCHAR" property="video" />
    <result column="thumb" jdbcType="VARCHAR" property="thumb" />
    <result column="comment_num" jdbcType="INTEGER" property="commentNum" />
    <result column="summary" jdbcType="VARCHAR" property="summary" />
    <result column="like_num" jdbcType="INTEGER" property="likeNum" />
    <result column="verify_status" jdbcType="INTEGER" property="verifyStatus" />
    <result column="verify_reason" jdbcType="VARCHAR" property="verifyReason" />
    <result column="verify_user_id" jdbcType="BIGINT" property="verifyUserId" />
    <result column="img" jdbcType="VARCHAR" property="img" />
    <result column="need_vip" jdbcType="INTEGER" property="needVip" />
    <result column="hot" jdbcType="TINYINT" property="hot" />
    <result column="recheck_id" jdbcType="BIGINT" property="recheckId" />
    <result column="technology_maturity" jdbcType="BIGINT" property="technologyMaturity" />
    <result column="cooperation_type" jdbcType="BIGINT" property="cooperationType" />
    <result column="type" jdbcType="INTEGER" property="type" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.qidao.application.entity.dynamic.Dynamic">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, member_id, publish_time, 
    title, url, video, thumb, comment_num, summary, like_num, verify_status, verify_reason, 
    verify_user_id, img, need_vip, hot, recheck_id, technology_maturity, cooperation_type, 
    type
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.qidao.application.entity.dynamic.DynamicExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.qidao.application.entity.dynamic.DynamicExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from dynamic
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from dynamic
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.dynamic.DynamicExample">
    delete from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.dynamic.Dynamic">
    insert into dynamic (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      member_id, publish_time, title, 
      url, video, thumb, 
      comment_num, summary, like_num, 
      verify_status, verify_reason, verify_user_id, 
      img, need_vip, hot, 
      recheck_id, technology_maturity, cooperation_type, 
      type, content)
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{memberId,jdbcType=BIGINT}, #{publishTime,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{video,jdbcType=VARCHAR}, #{thumb,jdbcType=VARCHAR}, 
      #{commentNum,jdbcType=INTEGER}, #{summary,jdbcType=VARCHAR}, #{likeNum,jdbcType=INTEGER}, 
      #{verifyStatus,jdbcType=INTEGER}, #{verifyReason,jdbcType=VARCHAR}, #{verifyUserId,jdbcType=BIGINT}, 
      #{img,jdbcType=VARCHAR}, #{needVip,jdbcType=INTEGER}, #{hot,jdbcType=TINYINT}, 
      #{recheckId,jdbcType=BIGINT}, #{technologyMaturity,jdbcType=BIGINT}, #{cooperationType,jdbcType=BIGINT}, 
      #{type,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into dynamic
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.memberId != null">
            member_id,
          </if>
          <if test="record.publishTime != null">
            publish_time,
          </if>
          <if test="record.title != null">
            title,
          </if>
          <if test="record.url != null">
            url,
          </if>
          <if test="record.video != null">
            video,
          </if>
          <if test="record.thumb != null">
            thumb,
          </if>
          <if test="record.commentNum != null">
            comment_num,
          </if>
          <if test="record.summary != null">
            summary,
          </if>
          <if test="record.likeNum != null">
            like_num,
          </if>
          <if test="record.verifyStatus != null">
            verify_status,
          </if>
          <if test="record.verifyReason != null">
            verify_reason,
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id,
          </if>
          <if test="record.img != null">
            img,
          </if>
          <if test="record.needVip != null">
            need_vip,
          </if>
          <if test="record.hot != null">
            hot,
          </if>
          <if test="record.recheckId != null">
            recheck_id,
          </if>
          <if test="record.technologyMaturity != null">
            technology_maturity,
          </if>
          <if test="record.cooperationType != null">
            cooperation_type,
          </if>
          <if test="record.type != null">
            type,
          </if>
          <if test="record.content != null">
            content,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.publishTime != null">
            #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.title != null">
            #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.url != null">
            #{record.url,jdbcType=VARCHAR},
          </if>
          <if test="record.video != null">
            #{record.video,jdbcType=VARCHAR},
          </if>
          <if test="record.thumb != null">
            #{record.thumb,jdbcType=VARCHAR},
          </if>
          <if test="record.commentNum != null">
            #{record.commentNum,jdbcType=INTEGER},
          </if>
          <if test="record.summary != null">
            #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.likeNum != null">
            #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyStatus != null">
            #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.img != null">
            #{record.img,jdbcType=VARCHAR},
          </if>
          <if test="record.needVip != null">
            #{record.needVip,jdbcType=INTEGER},
          </if>
          <if test="record.hot != null">
            #{record.hot,jdbcType=TINYINT},
          </if>
          <if test="record.recheckId != null">
            #{record.recheckId,jdbcType=BIGINT},
          </if>
          <if test="record.technologyMaturity != null">
            #{record.technologyMaturity,jdbcType=BIGINT},
          </if>
          <if test="record.cooperationType != null">
            #{record.cooperationType,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.dynamic.DynamicExample" resultType="java.lang.Long">
    select count(*) from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update dynamic
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.publishTime != null">
            publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.title != null">
            title = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.url != null">
            url = #{record.url,jdbcType=VARCHAR},
          </if>
          <if test="record.video != null">
            video = #{record.video,jdbcType=VARCHAR},
          </if>
          <if test="record.thumb != null">
            thumb = #{record.thumb,jdbcType=VARCHAR},
          </if>
          <if test="record.commentNum != null">
            comment_num = #{record.commentNum,jdbcType=INTEGER},
          </if>
          <if test="record.summary != null">
            summary = #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.likeNum != null">
            like_num = #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.img != null">
            img = #{record.img,jdbcType=VARCHAR},
          </if>
          <if test="record.needVip != null">
            need_vip = #{record.needVip,jdbcType=INTEGER},
          </if>
          <if test="record.hot != null">
            hot = #{record.hot,jdbcType=TINYINT},
          </if>
          <if test="record.recheckId != null">
            recheck_id = #{record.recheckId,jdbcType=BIGINT},
          </if>
          <if test="record.technologyMaturity != null">
            technology_maturity = #{record.technologyMaturity,jdbcType=BIGINT},
          </if>
          <if test="record.cooperationType != null">
            cooperation_type = #{record.cooperationType,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            type = #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            content = #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update dynamic
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
      title = #{record.title,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      video = #{record.video,jdbcType=VARCHAR},
      thumb = #{record.thumb,jdbcType=VARCHAR},
      comment_num = #{record.commentNum,jdbcType=INTEGER},
      summary = #{record.summary,jdbcType=VARCHAR},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
      img = #{record.img,jdbcType=VARCHAR},
      need_vip = #{record.needVip,jdbcType=INTEGER},
      hot = #{record.hot,jdbcType=TINYINT},
      recheck_id = #{record.recheckId,jdbcType=BIGINT},
      technology_maturity = #{record.technologyMaturity,jdbcType=BIGINT},
      cooperation_type = #{record.cooperationType,jdbcType=BIGINT},
      type = #{record.type,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update dynamic
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
      title = #{record.title,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      video = #{record.video,jdbcType=VARCHAR},
      thumb = #{record.thumb,jdbcType=VARCHAR},
      comment_num = #{record.commentNum,jdbcType=INTEGER},
      summary = #{record.summary,jdbcType=VARCHAR},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
      img = #{record.img,jdbcType=VARCHAR},
      need_vip = #{record.needVip,jdbcType=INTEGER},
      hot = #{record.hot,jdbcType=TINYINT},
      recheck_id = #{record.recheckId,jdbcType=BIGINT},
      technology_maturity = #{record.technologyMaturity,jdbcType=BIGINT},
      cooperation_type = #{record.cooperationType,jdbcType=BIGINT},
      type = #{record.type,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update dynamic
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.publishTime != null">
            publish_time = #{record.publishTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.title != null">
            title = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.url != null">
            url = #{record.url,jdbcType=VARCHAR},
          </if>
          <if test="record.video != null">
            video = #{record.video,jdbcType=VARCHAR},
          </if>
          <if test="record.thumb != null">
            thumb = #{record.thumb,jdbcType=VARCHAR},
          </if>
          <if test="record.commentNum != null">
            comment_num = #{record.commentNum,jdbcType=INTEGER},
          </if>
          <if test="record.summary != null">
            summary = #{record.summary,jdbcType=VARCHAR},
          </if>
          <if test="record.likeNum != null">
            like_num = #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.img != null">
            img = #{record.img,jdbcType=VARCHAR},
          </if>
          <if test="record.needVip != null">
            need_vip = #{record.needVip,jdbcType=INTEGER},
          </if>
          <if test="record.hot != null">
            hot = #{record.hot,jdbcType=TINYINT},
          </if>
          <if test="record.recheckId != null">
            recheck_id = #{record.recheckId,jdbcType=BIGINT},
          </if>
          <if test="record.technologyMaturity != null">
            technology_maturity = #{record.technologyMaturity,jdbcType=BIGINT},
          </if>
          <if test="record.cooperationType != null">
            cooperation_type = #{record.cooperationType,jdbcType=BIGINT},
          </if>
          <if test="record.type != null">
            type = #{record.type,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            content = #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qidao.application.entity.dynamic.Dynamic">
    update dynamic
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      member_id = #{memberId,jdbcType=BIGINT},
      publish_time = #{publishTime,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      video = #{video,jdbcType=VARCHAR},
      thumb = #{thumb,jdbcType=VARCHAR},
      comment_num = #{commentNum,jdbcType=INTEGER},
      summary = #{summary,jdbcType=VARCHAR},
      like_num = #{likeNum,jdbcType=INTEGER},
      verify_status = #{verifyStatus,jdbcType=INTEGER},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      verify_user_id = #{verifyUserId,jdbcType=BIGINT},
      img = #{img,jdbcType=VARCHAR},
      need_vip = #{needVip,jdbcType=INTEGER},
      hot = #{hot,jdbcType=TINYINT},
      recheck_id = #{recheckId,jdbcType=BIGINT},
      technology_maturity = #{technologyMaturity,jdbcType=BIGINT},
      cooperation_type = #{cooperationType,jdbcType=BIGINT},
      type = #{type,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.dynamic.Dynamic">
    update dynamic
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      member_id = #{memberId,jdbcType=BIGINT},
      publish_time = #{publishTime,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      video = #{video,jdbcType=VARCHAR},
      thumb = #{thumb,jdbcType=VARCHAR},
      comment_num = #{commentNum,jdbcType=INTEGER},
      summary = #{summary,jdbcType=VARCHAR},
      like_num = #{likeNum,jdbcType=INTEGER},
      verify_status = #{verifyStatus,jdbcType=INTEGER},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      verify_user_id = #{verifyUserId,jdbcType=BIGINT},
      img = #{img,jdbcType=VARCHAR},
      need_vip = #{needVip,jdbcType=INTEGER},
      hot = #{hot,jdbcType=TINYINT},
      recheck_id = #{recheckId,jdbcType=BIGINT},
      technology_maturity = #{technologyMaturity,jdbcType=BIGINT},
      cooperation_type = #{cooperationType,jdbcType=BIGINT},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.dynamic.DynamicExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.qidao.application.entity.dynamic.DynamicExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from dynamic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into dynamic
    (id, create_time, update_time, create_by, update_by, del_flag, member_id, publish_time, 
      title, url, video, thumb, comment_num, summary, like_num, verify_status, verify_reason, 
      verify_user_id, img, need_vip, hot, recheck_id, technology_maturity, cooperation_type, 
      type, content)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.memberId,jdbcType=BIGINT}, #{item.publishTime,jdbcType=TIMESTAMP}, #{item.title,jdbcType=VARCHAR}, 
        #{item.url,jdbcType=VARCHAR}, #{item.video,jdbcType=VARCHAR}, #{item.thumb,jdbcType=VARCHAR}, 
        #{item.commentNum,jdbcType=INTEGER}, #{item.summary,jdbcType=VARCHAR}, #{item.likeNum,jdbcType=INTEGER}, 
        #{item.verifyStatus,jdbcType=INTEGER}, #{item.verifyReason,jdbcType=VARCHAR}, #{item.verifyUserId,jdbcType=BIGINT}, 
        #{item.img,jdbcType=VARCHAR}, #{item.needVip,jdbcType=INTEGER}, #{item.hot,jdbcType=TINYINT}, 
        #{item.recheckId,jdbcType=BIGINT}, #{item.technologyMaturity,jdbcType=BIGINT}, 
        #{item.cooperationType,jdbcType=BIGINT}, #{item.type,jdbcType=INTEGER}, #{item.content,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into dynamic (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'member_id'.toString() == column.value">
          #{item.memberId,jdbcType=BIGINT}
        </if>
        <if test="'publish_time'.toString() == column.value">
          #{item.publishTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'title'.toString() == column.value">
          #{item.title,jdbcType=VARCHAR}
        </if>
        <if test="'url'.toString() == column.value">
          #{item.url,jdbcType=VARCHAR}
        </if>
        <if test="'video'.toString() == column.value">
          #{item.video,jdbcType=VARCHAR}
        </if>
        <if test="'thumb'.toString() == column.value">
          #{item.thumb,jdbcType=VARCHAR}
        </if>
        <if test="'comment_num'.toString() == column.value">
          #{item.commentNum,jdbcType=INTEGER}
        </if>
        <if test="'summary'.toString() == column.value">
          #{item.summary,jdbcType=VARCHAR}
        </if>
        <if test="'like_num'.toString() == column.value">
          #{item.likeNum,jdbcType=INTEGER}
        </if>
        <if test="'verify_status'.toString() == column.value">
          #{item.verifyStatus,jdbcType=INTEGER}
        </if>
        <if test="'verify_reason'.toString() == column.value">
          #{item.verifyReason,jdbcType=VARCHAR}
        </if>
        <if test="'verify_user_id'.toString() == column.value">
          #{item.verifyUserId,jdbcType=BIGINT}
        </if>
        <if test="'img'.toString() == column.value">
          #{item.img,jdbcType=VARCHAR}
        </if>
        <if test="'need_vip'.toString() == column.value">
          #{item.needVip,jdbcType=INTEGER}
        </if>
        <if test="'hot'.toString() == column.value">
          #{item.hot,jdbcType=TINYINT}
        </if>
        <if test="'recheck_id'.toString() == column.value">
          #{item.recheckId,jdbcType=BIGINT}
        </if>
        <if test="'technology_maturity'.toString() == column.value">
          #{item.technologyMaturity,jdbcType=BIGINT}
        </if>
        <if test="'cooperation_type'.toString() == column.value">
          #{item.cooperationType,jdbcType=BIGINT}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=INTEGER}
        </if>
        <if test="'content'.toString() == column.value">
          #{item.content,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>