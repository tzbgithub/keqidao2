<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.comment.CommentMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.comment.Comment">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="dynamic_id" jdbcType="BIGINT" property="dynamicId" />
    <result column="member_head_img" jdbcType="VARCHAR" property="memberHeadImg" />
    <result column="comment_time" jdbcType="TIMESTAMP" property="commentTime" />
    <result column="like_num" jdbcType="INTEGER" property="likeNum" />
    <result column="verify_user_id" jdbcType="BIGINT" property="verifyUserId" />
    <result column="verify_reason" jdbcType="VARCHAR" property="verifyReason" />
    <result column="verify_status" jdbcType="INTEGER" property="verifyStatus" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.qidao.application.entity.comment.Comment">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, member_id, member_name, 
    dynamic_id, member_head_img, comment_time, like_num, verify_user_id, verify_reason, 
    verify_status
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.qidao.application.entity.comment.CommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.qidao.application.entity.comment.CommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from comment
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.comment.CommentExample">
    delete from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.comment.Comment">
    insert into comment (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      member_id, member_name, dynamic_id, 
      member_head_img, comment_time, like_num, 
      verify_user_id, verify_reason, verify_status, 
      content)
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{memberId,jdbcType=BIGINT}, #{memberName,jdbcType=VARCHAR}, #{dynamicId,jdbcType=BIGINT}, 
      #{memberHeadImg,jdbcType=VARCHAR}, #{commentTime,jdbcType=TIMESTAMP}, #{likeNum,jdbcType=INTEGER}, 
      #{verifyUserId,jdbcType=BIGINT}, #{verifyReason,jdbcType=VARCHAR}, #{verifyStatus,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into comment
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.memberId != null">
            member_id,
          </if>
          <if test="record.memberName != null">
            member_name,
          </if>
          <if test="record.dynamicId != null">
            dynamic_id,
          </if>
          <if test="record.memberHeadImg != null">
            member_head_img,
          </if>
          <if test="record.commentTime != null">
            comment_time,
          </if>
          <if test="record.likeNum != null">
            like_num,
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id,
          </if>
          <if test="record.verifyReason != null">
            verify_reason,
          </if>
          <if test="record.verifyStatus != null">
            verify_status,
          </if>
          <if test="record.content != null">
            content,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.memberName != null">
            #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.dynamicId != null">
            #{record.dynamicId,jdbcType=BIGINT},
          </if>
          <if test="record.memberHeadImg != null">
            #{record.memberHeadImg,jdbcType=VARCHAR},
          </if>
          <if test="record.commentTime != null">
            #{record.commentTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.likeNum != null">
            #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyUserId != null">
            #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.verifyReason != null">
            #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.comment.CommentExample" resultType="java.lang.Long">
    select count(*) from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update comment
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.memberName != null">
            member_name = #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.dynamicId != null">
            dynamic_id = #{record.dynamicId,jdbcType=BIGINT},
          </if>
          <if test="record.memberHeadImg != null">
            member_head_img = #{record.memberHeadImg,jdbcType=VARCHAR},
          </if>
          <if test="record.commentTime != null">
            comment_time = #{record.commentTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.likeNum != null">
            like_num = #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            content = #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update comment
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      dynamic_id = #{record.dynamicId,jdbcType=BIGINT},
      member_head_img = #{record.memberHeadImg,jdbcType=VARCHAR},
      comment_time = #{record.commentTime,jdbcType=TIMESTAMP},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update comment
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      dynamic_id = #{record.dynamicId,jdbcType=BIGINT},
      member_head_img = #{record.memberHeadImg,jdbcType=VARCHAR},
      comment_time = #{record.commentTime,jdbcType=TIMESTAMP},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update comment
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.memberName != null">
            member_name = #{record.memberName,jdbcType=VARCHAR},
          </if>
          <if test="record.dynamicId != null">
            dynamic_id = #{record.dynamicId,jdbcType=BIGINT},
          </if>
          <if test="record.memberHeadImg != null">
            member_head_img = #{record.memberHeadImg,jdbcType=VARCHAR},
          </if>
          <if test="record.commentTime != null">
            comment_time = #{record.commentTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.likeNum != null">
            like_num = #{record.likeNum,jdbcType=INTEGER},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.content != null">
            content = #{record.content,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qidao.application.entity.comment.Comment">
    update comment
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      member_id = #{memberId,jdbcType=BIGINT},
      member_name = #{memberName,jdbcType=VARCHAR},
      dynamic_id = #{dynamicId,jdbcType=BIGINT},
      member_head_img = #{memberHeadImg,jdbcType=VARCHAR},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      like_num = #{likeNum,jdbcType=INTEGER},
      verify_user_id = #{verifyUserId,jdbcType=BIGINT},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      verify_status = #{verifyStatus,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.comment.Comment">
    update comment
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      member_id = #{memberId,jdbcType=BIGINT},
      member_name = #{memberName,jdbcType=VARCHAR},
      dynamic_id = #{dynamicId,jdbcType=BIGINT},
      member_head_img = #{memberHeadImg,jdbcType=VARCHAR},
      comment_time = #{commentTime,jdbcType=TIMESTAMP},
      like_num = #{likeNum,jdbcType=INTEGER},
      verify_user_id = #{verifyUserId,jdbcType=BIGINT},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      verify_status = #{verifyStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.comment.CommentExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.qidao.application.entity.comment.CommentExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into comment
    (id, create_time, update_time, create_by, update_by, del_flag, member_id, member_name, 
      dynamic_id, member_head_img, comment_time, like_num, verify_user_id, verify_reason, 
      verify_status, content)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.memberId,jdbcType=BIGINT}, #{item.memberName,jdbcType=VARCHAR}, #{item.dynamicId,jdbcType=BIGINT}, 
        #{item.memberHeadImg,jdbcType=VARCHAR}, #{item.commentTime,jdbcType=TIMESTAMP}, 
        #{item.likeNum,jdbcType=INTEGER}, #{item.verifyUserId,jdbcType=BIGINT}, #{item.verifyReason,jdbcType=VARCHAR}, 
        #{item.verifyStatus,jdbcType=INTEGER}, #{item.content,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into comment (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'member_id'.toString() == column.value">
          #{item.memberId,jdbcType=BIGINT}
        </if>
        <if test="'member_name'.toString() == column.value">
          #{item.memberName,jdbcType=VARCHAR}
        </if>
        <if test="'dynamic_id'.toString() == column.value">
          #{item.dynamicId,jdbcType=BIGINT}
        </if>
        <if test="'member_head_img'.toString() == column.value">
          #{item.memberHeadImg,jdbcType=VARCHAR}
        </if>
        <if test="'comment_time'.toString() == column.value">
          #{item.commentTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'like_num'.toString() == column.value">
          #{item.likeNum,jdbcType=INTEGER}
        </if>
        <if test="'verify_user_id'.toString() == column.value">
          #{item.verifyUserId,jdbcType=BIGINT}
        </if>
        <if test="'verify_reason'.toString() == column.value">
          #{item.verifyReason,jdbcType=VARCHAR}
        </if>
        <if test="'verify_status'.toString() == column.value">
          #{item.verifyStatus,jdbcType=INTEGER}
        </if>
        <if test="'content'.toString() == column.value">
          #{item.content,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>