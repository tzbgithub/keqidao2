<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.log.LogErrorMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.log.LogError">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="vip_level" jdbcType="INTEGER" property="vipLevel" />
    <result column="exception_summary" jdbcType="VARCHAR" property="exceptionSummary" />
    <result column="exception_time" jdbcType="TIMESTAMP" property="exceptionTime" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="channel" jdbcType="VARCHAR" property="channel" />
    <result column="machine" jdbcType="VARCHAR" property="machine" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.qidao.application.entity.log.LogError">
    <result column="exception_description" jdbcType="LONGVARCHAR" property="exceptionDescription" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_id, vip_level, exception_summary, exception_time, version, status, channel, 
    machine, create_time, update_time, create_by, update_by, del_flag
  </sql>
  <sql id="Blob_Column_List">
    exception_description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.qidao.application.entity.log.LogErrorExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.qidao.application.entity.log.LogErrorExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from log_error
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from log_error
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.log.LogErrorExample">
    delete from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.log.LogError">
    insert into log_error (id, member_id, vip_level, 
      exception_summary, exception_time, version, 
      status, channel, machine, 
      create_time, update_time, create_by, 
      update_by, del_flag, exception_description
      )
    values (#{id,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, #{vipLevel,jdbcType=INTEGER}, 
      #{exceptionSummary,jdbcType=VARCHAR}, #{exceptionTime,jdbcType=TIMESTAMP}, #{version,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{channel,jdbcType=VARCHAR}, #{machine,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, 
      #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, #{exceptionDescription,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into log_error
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.memberId != null">
            member_id,
          </if>
          <if test="record.vipLevel != null">
            vip_level,
          </if>
          <if test="record.exceptionSummary != null">
            exception_summary,
          </if>
          <if test="record.exceptionTime != null">
            exception_time,
          </if>
          <if test="record.version != null">
            version,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.channel != null">
            channel,
          </if>
          <if test="record.machine != null">
            machine,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.exceptionDescription != null">
            exception_description,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.memberId != null">
            #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.vipLevel != null">
            #{record.vipLevel,jdbcType=INTEGER},
          </if>
          <if test="record.exceptionSummary != null">
            #{record.exceptionSummary,jdbcType=VARCHAR},
          </if>
          <if test="record.exceptionTime != null">
            #{record.exceptionTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.channel != null">
            #{record.channel,jdbcType=VARCHAR},
          </if>
          <if test="record.machine != null">
            #{record.machine,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.exceptionDescription != null">
            #{record.exceptionDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.log.LogErrorExample" resultType="java.lang.Long">
    select count(*) from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update log_error
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.vipLevel != null">
            vip_level = #{record.vipLevel,jdbcType=INTEGER},
          </if>
          <if test="record.exceptionSummary != null">
            exception_summary = #{record.exceptionSummary,jdbcType=VARCHAR},
          </if>
          <if test="record.exceptionTime != null">
            exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.channel != null">
            channel = #{record.channel,jdbcType=VARCHAR},
          </if>
          <if test="record.machine != null">
            machine = #{record.machine,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.exceptionDescription != null">
            exception_description = #{record.exceptionDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update log_error
    set id = #{record.id,jdbcType=BIGINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      vip_level = #{record.vipLevel,jdbcType=INTEGER},
      exception_summary = #{record.exceptionSummary,jdbcType=VARCHAR},
      exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      channel = #{record.channel,jdbcType=VARCHAR},
      machine = #{record.machine,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      exception_description = #{record.exceptionDescription,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update log_error
    set id = #{record.id,jdbcType=BIGINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      vip_level = #{record.vipLevel,jdbcType=INTEGER},
      exception_summary = #{record.exceptionSummary,jdbcType=VARCHAR},
      exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      channel = #{record.channel,jdbcType=VARCHAR},
      machine = #{record.machine,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update log_error
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.memberId != null">
            member_id = #{record.memberId,jdbcType=BIGINT},
          </if>
          <if test="record.vipLevel != null">
            vip_level = #{record.vipLevel,jdbcType=INTEGER},
          </if>
          <if test="record.exceptionSummary != null">
            exception_summary = #{record.exceptionSummary,jdbcType=VARCHAR},
          </if>
          <if test="record.exceptionTime != null">
            exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.channel != null">
            channel = #{record.channel,jdbcType=VARCHAR},
          </if>
          <if test="record.machine != null">
            machine = #{record.machine,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.exceptionDescription != null">
            exception_description = #{record.exceptionDescription,jdbcType=LONGVARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.qidao.application.entity.log.LogError">
    update log_error
    set member_id = #{memberId,jdbcType=BIGINT},
      vip_level = #{vipLevel,jdbcType=INTEGER},
      exception_summary = #{exceptionSummary,jdbcType=VARCHAR},
      exception_time = #{exceptionTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      channel = #{channel,jdbcType=VARCHAR},
      machine = #{machine,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      exception_description = #{exceptionDescription,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.log.LogError">
    update log_error
    set member_id = #{memberId,jdbcType=BIGINT},
      vip_level = #{vipLevel,jdbcType=INTEGER},
      exception_summary = #{exceptionSummary,jdbcType=VARCHAR},
      exception_time = #{exceptionTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      channel = #{channel,jdbcType=VARCHAR},
      machine = #{machine,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.log.LogErrorExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.qidao.application.entity.log.LogErrorExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from log_error
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into log_error
    (id, member_id, vip_level, exception_summary, exception_time, version, status, channel, 
      machine, create_time, update_time, create_by, update_by, del_flag, exception_description
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.memberId,jdbcType=BIGINT}, #{item.vipLevel,jdbcType=INTEGER}, 
        #{item.exceptionSummary,jdbcType=VARCHAR}, #{item.exceptionTime,jdbcType=TIMESTAMP}, 
        #{item.version,jdbcType=VARCHAR}, #{item.status,jdbcType=INTEGER}, #{item.channel,jdbcType=VARCHAR}, 
        #{item.machine,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.exceptionDescription,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into log_error (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'member_id'.toString() == column.value">
          #{item.memberId,jdbcType=BIGINT}
        </if>
        <if test="'vip_level'.toString() == column.value">
          #{item.vipLevel,jdbcType=INTEGER}
        </if>
        <if test="'exception_summary'.toString() == column.value">
          #{item.exceptionSummary,jdbcType=VARCHAR}
        </if>
        <if test="'exception_time'.toString() == column.value">
          #{item.exceptionTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'channel'.toString() == column.value">
          #{item.channel,jdbcType=VARCHAR}
        </if>
        <if test="'machine'.toString() == column.value">
          #{item.machine,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'exception_description'.toString() == column.value">
          #{item.exceptionDescription,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>