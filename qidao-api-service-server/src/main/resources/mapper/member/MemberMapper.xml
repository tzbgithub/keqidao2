<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.member.MemberMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.member.Member">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
    <result column="no" jdbcType="VARCHAR" property="no" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="organization_id" jdbcType="BIGINT" property="organizationId" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="position_id" jdbcType="BIGINT" property="positionId" />
    <result column="education_id" jdbcType="BIGINT" property="educationId" />
    <result column="phone" jdbcType="CHAR" property="phone" />
    <result column="push_status" jdbcType="INTEGER" property="pushStatus" />
    <result column="belong" jdbcType="VARCHAR" property="belong" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="head_image" jdbcType="VARCHAR" property="headImage" />
    <result column="backend_image" jdbcType="VARCHAR" property="backendImage" />
    <result column="vip_start_time" jdbcType="TIMESTAMP" property="vipStartTime" />
    <result column="vip_end_time" jdbcType="TIMESTAMP" property="vipEndTime" />
    <result column="industry_id" jdbcType="BIGINT" property="industryId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="union_id" jdbcType="VARCHAR" property="unionId" />
    <result column="qualifications" jdbcType="VARCHAR" property="qualifications" />
    <result column="verify_status" jdbcType="INTEGER" property="verifyStatus" />
    <result column="verify_reason" jdbcType="VARCHAR" property="verifyReason" />
    <result column="license" jdbcType="VARCHAR" property="license" />
    <result column="verify_user_id" jdbcType="BIGINT" property="verifyUserId" />
    <result column="im_easemob_username" jdbcType="VARCHAR" property="imEasemobUsername" />
    <result column="im_easemob_active" jdbcType="INTEGER" property="imEasemobActive" />
    <result column="job_position" jdbcType="VARCHAR" property="jobPosition" />
    <result column="teacher_id" jdbcType="BIGINT" property="teacherId" />
  </resultMap>

    <resultMap id="FeedbackMap" type="com.qidao.application.vo.FeedbackMemberVo">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
        <result column="level" jdbcType="INTEGER" property="level" />
    </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, create_time, update_time, create_by, update_by, del_flag, no, level, organization_id, 
    role, position_id, education_id, phone, push_status, belong, password, head_image, 
    backend_image, vip_start_time, vip_end_time, industry_id, name, email, union_id, 
    qualifications, verify_status, verify_reason, license, verify_user_id, im_easemob_username, 
    im_easemob_active, job_position, teacher_id
  </sql>
  <select id="selectByExample" parameterType="com.qidao.application.entity.member.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member
    where id = #{id,jdbcType=BIGINT}
  </select>


    <select id="selectById" parameterType="java.lang.Long" resultMap="FeedbackMap">
    select
    m.id,
	m. LEVEL,
	m.del_flag
    from member m
    where id = #{id,jdbcType=BIGINT}
  </select>



  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from member
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.member.MemberExample">
    delete from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.member.Member">
    insert into member (id, create_time, update_time, 
      create_by, update_by, del_flag, 
      no, level, organization_id, 
      role, position_id, education_id, 
      phone, push_status, belong, 
      password, head_image, backend_image, 
      vip_start_time, vip_end_time, industry_id, 
      name, email, union_id, 
      qualifications, verify_status, verify_reason, 
      license, verify_user_id, im_easemob_username, 
      im_easemob_active, job_position, teacher_id
      )
    values (#{id,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=TINYINT}, 
      #{no,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{organizationId,jdbcType=BIGINT}, 
      #{role,jdbcType=INTEGER}, #{positionId,jdbcType=BIGINT}, #{educationId,jdbcType=BIGINT}, 
      #{phone,jdbcType=CHAR}, #{pushStatus,jdbcType=INTEGER}, #{belong,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{headImage,jdbcType=VARCHAR}, #{backendImage,jdbcType=VARCHAR}, 
      #{vipStartTime,jdbcType=TIMESTAMP}, #{vipEndTime,jdbcType=TIMESTAMP}, #{industryId,jdbcType=BIGINT}, 
      #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{unionId,jdbcType=VARCHAR}, 
      #{qualifications,jdbcType=VARCHAR}, #{verifyStatus,jdbcType=INTEGER}, #{verifyReason,jdbcType=VARCHAR}, 
      #{license,jdbcType=VARCHAR}, #{verifyUserId,jdbcType=BIGINT}, #{imEasemobUsername,jdbcType=VARCHAR}, 
      #{imEasemobActive,jdbcType=INTEGER}, #{jobPosition,jdbcType=VARCHAR}, #{teacherId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into member
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
          <if test="record.delFlag != null">
            del_flag,
          </if>
          <if test="record.no != null">
            no,
          </if>
          <if test="record.level != null">
            level,
          </if>
          <if test="record.organizationId != null">
            organization_id,
          </if>
          <if test="record.role != null">
            role,
          </if>
          <if test="record.positionId != null">
            position_id,
          </if>
          <if test="record.educationId != null">
            education_id,
          </if>
          <if test="record.phone != null">
            phone,
          </if>
          <if test="record.pushStatus != null">
            push_status,
          </if>
          <if test="record.belong != null">
            belong,
          </if>
          <if test="record.password != null">
            password,
          </if>
          <if test="record.headImage != null">
            head_image,
          </if>
          <if test="record.backendImage != null">
            backend_image,
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time,
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time,
          </if>
          <if test="record.industryId != null">
            industry_id,
          </if>
          <if test="record.name != null">
            name,
          </if>
          <if test="record.email != null">
            email,
          </if>
          <if test="record.unionId != null">
            union_id,
          </if>
          <if test="record.qualifications != null">
            qualifications,
          </if>
          <if test="record.verifyStatus != null">
            verify_status,
          </if>
          <if test="record.verifyReason != null">
            verify_reason,
          </if>
          <if test="record.license != null">
            license,
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id,
          </if>
          <if test="record.imEasemobUsername != null">
            im_easemob_username,
          </if>
          <if test="record.imEasemobActive != null">
            im_easemob_active,
          </if>
          <if test="record.jobPosition != null">
            job_position,
          </if>
          <if test="record.teacherId != null">
            teacher_id,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.level != null">
            #{record.level,jdbcType=INTEGER},
          </if>
          <if test="record.organizationId != null">
            #{record.organizationId,jdbcType=BIGINT},
          </if>
          <if test="record.role != null">
            #{record.role,jdbcType=INTEGER},
          </if>
          <if test="record.positionId != null">
            #{record.positionId,jdbcType=BIGINT},
          </if>
          <if test="record.educationId != null">
            #{record.educationId,jdbcType=BIGINT},
          </if>
          <if test="record.phone != null">
            #{record.phone,jdbcType=CHAR},
          </if>
          <if test="record.pushStatus != null">
            #{record.pushStatus,jdbcType=INTEGER},
          </if>
          <if test="record.belong != null">
            #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.password != null">
            #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.headImage != null">
            #{record.headImage,jdbcType=VARCHAR},
          </if>
          <if test="record.backendImage != null">
            #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.industryId != null">
            #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.email != null">
            #{record.email,jdbcType=VARCHAR},
          </if>
          <if test="record.unionId != null">
            #{record.unionId,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.license != null">
            #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.imEasemobUsername != null">
            #{record.imEasemobUsername,jdbcType=VARCHAR},
          </if>
          <if test="record.imEasemobActive != null">
            #{record.imEasemobActive,jdbcType=INTEGER},
          </if>
          <if test="record.jobPosition != null">
            #{record.jobPosition,jdbcType=VARCHAR},
          </if>
          <if test="record.teacherId != null">
            #{record.teacherId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.member.MemberExample" resultType="java.lang.Long">
    select count(*) from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.level != null">
            level = #{record.level,jdbcType=INTEGER},
          </if>
          <if test="record.organizationId != null">
            organization_id = #{record.organizationId,jdbcType=BIGINT},
          </if>
          <if test="record.role != null">
            role = #{record.role,jdbcType=INTEGER},
          </if>
          <if test="record.positionId != null">
            position_id = #{record.positionId,jdbcType=BIGINT},
          </if>
          <if test="record.educationId != null">
            education_id = #{record.educationId,jdbcType=BIGINT},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=CHAR},
          </if>
          <if test="record.pushStatus != null">
            push_status = #{record.pushStatus,jdbcType=INTEGER},
          </if>
          <if test="record.belong != null">
            belong = #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.password != null">
            password = #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.headImage != null">
            head_image = #{record.headImage,jdbcType=VARCHAR},
          </if>
          <if test="record.backendImage != null">
            backend_image = #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.industryId != null">
            industry_id = #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.email != null">
            email = #{record.email,jdbcType=VARCHAR},
          </if>
          <if test="record.unionId != null">
            union_id = #{record.unionId,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            qualifications = #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.license != null">
            license = #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.imEasemobUsername != null">
            im_easemob_username = #{record.imEasemobUsername,jdbcType=VARCHAR},
          </if>
          <if test="record.imEasemobActive != null">
            im_easemob_active = #{record.imEasemobActive,jdbcType=INTEGER},
          </if>
          <if test="record.jobPosition != null">
            job_position = #{record.jobPosition,jdbcType=VARCHAR},
          </if>
          <if test="record.teacherId != null">
            teacher_id = #{record.teacherId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member
    set id = #{record.id,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      no = #{record.no,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=INTEGER},
      organization_id = #{record.organizationId,jdbcType=BIGINT},
      role = #{record.role,jdbcType=INTEGER},
      position_id = #{record.positionId,jdbcType=BIGINT},
      education_id = #{record.educationId,jdbcType=BIGINT},
      phone = #{record.phone,jdbcType=CHAR},
      push_status = #{record.pushStatus,jdbcType=INTEGER},
      belong = #{record.belong,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      head_image = #{record.headImage,jdbcType=VARCHAR},
      backend_image = #{record.backendImage,jdbcType=VARCHAR},
      vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
      industry_id = #{record.industryId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      union_id = #{record.unionId,jdbcType=VARCHAR},
      qualifications = #{record.qualifications,jdbcType=VARCHAR},
      verify_status = #{record.verifyStatus,jdbcType=INTEGER},
      verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
      license = #{record.license,jdbcType=VARCHAR},
      verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
      im_easemob_username = #{record.imEasemobUsername,jdbcType=VARCHAR},
      im_easemob_active = #{record.imEasemobActive,jdbcType=INTEGER},
      job_position = #{record.jobPosition,jdbcType=VARCHAR},
      teacher_id = #{record.teacherId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update member
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
          <if test="record.delFlag != null">
            del_flag = #{record.delFlag,jdbcType=TINYINT},
          </if>
          <if test="record.no != null">
            no = #{record.no,jdbcType=VARCHAR},
          </if>
          <if test="record.level != null">
            level = #{record.level,jdbcType=INTEGER},
          </if>
          <if test="record.organizationId != null">
            organization_id = #{record.organizationId,jdbcType=BIGINT},
          </if>
          <if test="record.role != null">
            role = #{record.role,jdbcType=INTEGER},
          </if>
          <if test="record.positionId != null">
            position_id = #{record.positionId,jdbcType=BIGINT},
          </if>
          <if test="record.educationId != null">
            education_id = #{record.educationId,jdbcType=BIGINT},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=CHAR},
          </if>
          <if test="record.pushStatus != null">
            push_status = #{record.pushStatus,jdbcType=INTEGER},
          </if>
          <if test="record.belong != null">
            belong = #{record.belong,jdbcType=VARCHAR},
          </if>
          <if test="record.password != null">
            password = #{record.password,jdbcType=VARCHAR},
          </if>
          <if test="record.headImage != null">
            head_image = #{record.headImage,jdbcType=VARCHAR},
          </if>
          <if test="record.backendImage != null">
            backend_image = #{record.backendImage,jdbcType=VARCHAR},
          </if>
          <if test="record.vipStartTime != null">
            vip_start_time = #{record.vipStartTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.vipEndTime != null">
            vip_end_time = #{record.vipEndTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.industryId != null">
            industry_id = #{record.industryId,jdbcType=BIGINT},
          </if>
          <if test="record.name != null">
            name = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.email != null">
            email = #{record.email,jdbcType=VARCHAR},
          </if>
          <if test="record.unionId != null">
            union_id = #{record.unionId,jdbcType=VARCHAR},
          </if>
          <if test="record.qualifications != null">
            qualifications = #{record.qualifications,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyStatus != null">
            verify_status = #{record.verifyStatus,jdbcType=INTEGER},
          </if>
          <if test="record.verifyReason != null">
            verify_reason = #{record.verifyReason,jdbcType=VARCHAR},
          </if>
          <if test="record.license != null">
            license = #{record.license,jdbcType=VARCHAR},
          </if>
          <if test="record.verifyUserId != null">
            verify_user_id = #{record.verifyUserId,jdbcType=BIGINT},
          </if>
          <if test="record.imEasemobUsername != null">
            im_easemob_username = #{record.imEasemobUsername,jdbcType=VARCHAR},
          </if>
          <if test="record.imEasemobActive != null">
            im_easemob_active = #{record.imEasemobActive,jdbcType=INTEGER},
          </if>
          <if test="record.jobPosition != null">
            job_position = #{record.jobPosition,jdbcType=VARCHAR},
          </if>
          <if test="record.teacherId != null">
            teacher_id = #{record.teacherId,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.member.Member">
    update member
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      no = #{no,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      organization_id = #{organizationId,jdbcType=BIGINT},
      role = #{role,jdbcType=INTEGER},
      position_id = #{positionId,jdbcType=BIGINT},
      education_id = #{educationId,jdbcType=BIGINT},
      phone = #{phone,jdbcType=CHAR},
      push_status = #{pushStatus,jdbcType=INTEGER},
      belong = #{belong,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      head_image = #{headImage,jdbcType=VARCHAR},
      backend_image = #{backendImage,jdbcType=VARCHAR},
      vip_start_time = #{vipStartTime,jdbcType=TIMESTAMP},
      vip_end_time = #{vipEndTime,jdbcType=TIMESTAMP},
      industry_id = #{industryId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      union_id = #{unionId,jdbcType=VARCHAR},
      qualifications = #{qualifications,jdbcType=VARCHAR},
      verify_status = #{verifyStatus,jdbcType=INTEGER},
      verify_reason = #{verifyReason,jdbcType=VARCHAR},
      license = #{license,jdbcType=VARCHAR},
      verify_user_id = #{verifyUserId,jdbcType=BIGINT},
      im_easemob_username = #{imEasemobUsername,jdbcType=VARCHAR},
      im_easemob_active = #{imEasemobActive,jdbcType=INTEGER},
      job_position = #{jobPosition,jdbcType=VARCHAR},
      teacher_id = #{teacherId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.member.MemberExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into member
    (id, create_time, update_time, create_by, update_by, del_flag, no, level, organization_id, 
      role, position_id, education_id, phone, push_status, belong, password, head_image, 
      backend_image, vip_start_time, vip_end_time, industry_id, name, email, union_id, 
      qualifications, verify_status, verify_reason, license, verify_user_id, im_easemob_username, 
      im_easemob_active, job_position, teacher_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}, #{item.delFlag,jdbcType=TINYINT}, 
        #{item.no,jdbcType=VARCHAR}, #{item.level,jdbcType=INTEGER}, #{item.organizationId,jdbcType=BIGINT}, 
        #{item.role,jdbcType=INTEGER}, #{item.positionId,jdbcType=BIGINT}, #{item.educationId,jdbcType=BIGINT}, 
        #{item.phone,jdbcType=CHAR}, #{item.pushStatus,jdbcType=INTEGER}, #{item.belong,jdbcType=VARCHAR}, 
        #{item.password,jdbcType=VARCHAR}, #{item.headImage,jdbcType=VARCHAR}, #{item.backendImage,jdbcType=VARCHAR}, 
        #{item.vipStartTime,jdbcType=TIMESTAMP}, #{item.vipEndTime,jdbcType=TIMESTAMP}, 
        #{item.industryId,jdbcType=BIGINT}, #{item.name,jdbcType=VARCHAR}, #{item.email,jdbcType=VARCHAR}, 
        #{item.unionId,jdbcType=VARCHAR}, #{item.qualifications,jdbcType=VARCHAR}, #{item.verifyStatus,jdbcType=INTEGER}, 
        #{item.verifyReason,jdbcType=VARCHAR}, #{item.license,jdbcType=VARCHAR}, #{item.verifyUserId,jdbcType=BIGINT}, 
        #{item.imEasemobUsername,jdbcType=VARCHAR}, #{item.imEasemobActive,jdbcType=INTEGER}, 
        #{item.jobPosition,jdbcType=VARCHAR}, #{item.teacherId,jdbcType=BIGINT})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into member (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
        <if test="'del_flag'.toString() == column.value">
          #{item.delFlag,jdbcType=TINYINT}
        </if>
        <if test="'no'.toString() == column.value">
          #{item.no,jdbcType=VARCHAR}
        </if>
        <if test="'level'.toString() == column.value">
          #{item.level,jdbcType=INTEGER}
        </if>
        <if test="'organization_id'.toString() == column.value">
          #{item.organizationId,jdbcType=BIGINT}
        </if>
        <if test="'role'.toString() == column.value">
          #{item.role,jdbcType=INTEGER}
        </if>
        <if test="'position_id'.toString() == column.value">
          #{item.positionId,jdbcType=BIGINT}
        </if>
        <if test="'education_id'.toString() == column.value">
          #{item.educationId,jdbcType=BIGINT}
        </if>
        <if test="'phone'.toString() == column.value">
          #{item.phone,jdbcType=CHAR}
        </if>
        <if test="'push_status'.toString() == column.value">
          #{item.pushStatus,jdbcType=INTEGER}
        </if>
        <if test="'belong'.toString() == column.value">
          #{item.belong,jdbcType=VARCHAR}
        </if>
        <if test="'password'.toString() == column.value">
          #{item.password,jdbcType=VARCHAR}
        </if>
        <if test="'head_image'.toString() == column.value">
          #{item.headImage,jdbcType=VARCHAR}
        </if>
        <if test="'backend_image'.toString() == column.value">
          #{item.backendImage,jdbcType=VARCHAR}
        </if>
        <if test="'vip_start_time'.toString() == column.value">
          #{item.vipStartTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'vip_end_time'.toString() == column.value">
          #{item.vipEndTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'industry_id'.toString() == column.value">
          #{item.industryId,jdbcType=BIGINT}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'email'.toString() == column.value">
          #{item.email,jdbcType=VARCHAR}
        </if>
        <if test="'union_id'.toString() == column.value">
          #{item.unionId,jdbcType=VARCHAR}
        </if>
        <if test="'qualifications'.toString() == column.value">
          #{item.qualifications,jdbcType=VARCHAR}
        </if>
        <if test="'verify_status'.toString() == column.value">
          #{item.verifyStatus,jdbcType=INTEGER}
        </if>
        <if test="'verify_reason'.toString() == column.value">
          #{item.verifyReason,jdbcType=VARCHAR}
        </if>
        <if test="'license'.toString() == column.value">
          #{item.license,jdbcType=VARCHAR}
        </if>
        <if test="'verify_user_id'.toString() == column.value">
          #{item.verifyUserId,jdbcType=BIGINT}
        </if>
        <if test="'im_easemob_username'.toString() == column.value">
          #{item.imEasemobUsername,jdbcType=VARCHAR}
        </if>
        <if test="'im_easemob_active'.toString() == column.value">
          #{item.imEasemobActive,jdbcType=INTEGER}
        </if>
        <if test="'job_position'.toString() == column.value">
          #{item.jobPosition,jdbcType=VARCHAR}
        </if>
        <if test="'teacher_id'.toString() == column.value">
          #{item.teacherId,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>