<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qidao.application.mapper.config.LogOperMapper">
  <resultMap id="BaseResultMap" type="com.qidao.application.entity.config.LogOper">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="business_type" jdbcType="INTEGER" property="businessType" />
    <result column="method" jdbcType="VARCHAR" property="method" />
    <result column="request_method" jdbcType="VARCHAR" property="requestMethod" />
    <result column="operator_type" jdbcType="INTEGER" property="operatorType" />
    <result column="oper_user_id" jdbcType="BIGINT" property="operUserId" />
    <result column="third_type" jdbcType="INTEGER" property="thirdType" />
    <result column="third_id" jdbcType="VARCHAR" property="thirdId" />
    <result column="oper_url" jdbcType="VARCHAR" property="operUrl" />
    <result column="oper_ip" jdbcType="VARCHAR" property="operIp" />
    <result column="oper_location" jdbcType="VARCHAR" property="operLocation" />
    <result column="oper_param" jdbcType="VARCHAR" property="operParam" />
    <result column="json_result" jdbcType="VARCHAR" property="jsonResult" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="error_msg" jdbcType="VARCHAR" property="errorMsg" />
    <result column="oper_time" jdbcType="TIMESTAMP" property="operTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="version" jdbcType="VARCHAR" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, title, business_type, method, request_method, operator_type, oper_user_id, third_type, 
    third_id, oper_url, oper_ip, oper_location, oper_param, json_result, status, error_msg, 
    oper_time, remark, version
  </sql>
  <select id="selectByExample" parameterType="com.qidao.application.entity.config.LogOperExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from log_oper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from log_oper
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from log_oper
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.qidao.application.entity.config.LogOperExample">
    delete from log_oper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qidao.application.entity.config.LogOper">
    insert into log_oper (id, title, business_type, 
      method, request_method, operator_type, 
      oper_user_id, third_type, third_id, 
      oper_url, oper_ip, oper_location, 
      oper_param, json_result, status, 
      error_msg, oper_time, remark, 
      version)
    values (#{id,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{businessType,jdbcType=INTEGER}, 
      #{method,jdbcType=VARCHAR}, #{requestMethod,jdbcType=VARCHAR}, #{operatorType,jdbcType=INTEGER}, 
      #{operUserId,jdbcType=BIGINT}, #{thirdType,jdbcType=INTEGER}, #{thirdId,jdbcType=VARCHAR}, 
      #{operUrl,jdbcType=VARCHAR}, #{operIp,jdbcType=VARCHAR}, #{operLocation,jdbcType=VARCHAR}, 
      #{operParam,jdbcType=VARCHAR}, #{jsonResult,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{errorMsg,jdbcType=VARCHAR}, #{operTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{version,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into log_oper
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.title != null">
            title,
          </if>
          <if test="record.businessType != null">
            business_type,
          </if>
          <if test="record.method != null">
            method,
          </if>
          <if test="record.requestMethod != null">
            request_method,
          </if>
          <if test="record.operatorType != null">
            operator_type,
          </if>
          <if test="record.operUserId != null">
            oper_user_id,
          </if>
          <if test="record.thirdType != null">
            third_type,
          </if>
          <if test="record.thirdId != null">
            third_id,
          </if>
          <if test="record.operUrl != null">
            oper_url,
          </if>
          <if test="record.operIp != null">
            oper_ip,
          </if>
          <if test="record.operLocation != null">
            oper_location,
          </if>
          <if test="record.operParam != null">
            oper_param,
          </if>
          <if test="record.jsonResult != null">
            json_result,
          </if>
          <if test="record.status != null">
            status,
          </if>
          <if test="record.errorMsg != null">
            error_msg,
          </if>
          <if test="record.operTime != null">
            oper_time,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.version != null">
            version,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.title != null">
            #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.businessType != null">
            #{record.businessType,jdbcType=INTEGER},
          </if>
          <if test="record.method != null">
            #{record.method,jdbcType=VARCHAR},
          </if>
          <if test="record.requestMethod != null">
            #{record.requestMethod,jdbcType=VARCHAR},
          </if>
          <if test="record.operatorType != null">
            #{record.operatorType,jdbcType=INTEGER},
          </if>
          <if test="record.operUserId != null">
            #{record.operUserId,jdbcType=BIGINT},
          </if>
          <if test="record.thirdType != null">
            #{record.thirdType,jdbcType=INTEGER},
          </if>
          <if test="record.thirdId != null">
            #{record.thirdId,jdbcType=VARCHAR},
          </if>
          <if test="record.operUrl != null">
            #{record.operUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.operIp != null">
            #{record.operIp,jdbcType=VARCHAR},
          </if>
          <if test="record.operLocation != null">
            #{record.operLocation,jdbcType=VARCHAR},
          </if>
          <if test="record.operParam != null">
            #{record.operParam,jdbcType=VARCHAR},
          </if>
          <if test="record.jsonResult != null">
            #{record.jsonResult,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.errorMsg != null">
            #{record.errorMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.operTime != null">
            #{record.operTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.version != null">
            #{record.version,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.qidao.application.entity.config.LogOperExample" resultType="java.lang.Long">
    select count(*) from log_oper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update log_oper
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.title != null">
            title = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.businessType != null">
            business_type = #{record.businessType,jdbcType=INTEGER},
          </if>
          <if test="record.method != null">
            method = #{record.method,jdbcType=VARCHAR},
          </if>
          <if test="record.requestMethod != null">
            request_method = #{record.requestMethod,jdbcType=VARCHAR},
          </if>
          <if test="record.operatorType != null">
            operator_type = #{record.operatorType,jdbcType=INTEGER},
          </if>
          <if test="record.operUserId != null">
            oper_user_id = #{record.operUserId,jdbcType=BIGINT},
          </if>
          <if test="record.thirdType != null">
            third_type = #{record.thirdType,jdbcType=INTEGER},
          </if>
          <if test="record.thirdId != null">
            third_id = #{record.thirdId,jdbcType=VARCHAR},
          </if>
          <if test="record.operUrl != null">
            oper_url = #{record.operUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.operIp != null">
            oper_ip = #{record.operIp,jdbcType=VARCHAR},
          </if>
          <if test="record.operLocation != null">
            oper_location = #{record.operLocation,jdbcType=VARCHAR},
          </if>
          <if test="record.operParam != null">
            oper_param = #{record.operParam,jdbcType=VARCHAR},
          </if>
          <if test="record.jsonResult != null">
            json_result = #{record.jsonResult,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.errorMsg != null">
            error_msg = #{record.errorMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.operTime != null">
            oper_time = #{record.operTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update log_oper
    set id = #{record.id,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      business_type = #{record.businessType,jdbcType=INTEGER},
      method = #{record.method,jdbcType=VARCHAR},
      request_method = #{record.requestMethod,jdbcType=VARCHAR},
      operator_type = #{record.operatorType,jdbcType=INTEGER},
      oper_user_id = #{record.operUserId,jdbcType=BIGINT},
      third_type = #{record.thirdType,jdbcType=INTEGER},
      third_id = #{record.thirdId,jdbcType=VARCHAR},
      oper_url = #{record.operUrl,jdbcType=VARCHAR},
      oper_ip = #{record.operIp,jdbcType=VARCHAR},
      oper_location = #{record.operLocation,jdbcType=VARCHAR},
      oper_param = #{record.operParam,jdbcType=VARCHAR},
      json_result = #{record.jsonResult,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      error_msg = #{record.errorMsg,jdbcType=VARCHAR},
      oper_time = #{record.operTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update log_oper
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.title != null">
            title = #{record.title,jdbcType=VARCHAR},
          </if>
          <if test="record.businessType != null">
            business_type = #{record.businessType,jdbcType=INTEGER},
          </if>
          <if test="record.method != null">
            method = #{record.method,jdbcType=VARCHAR},
          </if>
          <if test="record.requestMethod != null">
            request_method = #{record.requestMethod,jdbcType=VARCHAR},
          </if>
          <if test="record.operatorType != null">
            operator_type = #{record.operatorType,jdbcType=INTEGER},
          </if>
          <if test="record.operUserId != null">
            oper_user_id = #{record.operUserId,jdbcType=BIGINT},
          </if>
          <if test="record.thirdType != null">
            third_type = #{record.thirdType,jdbcType=INTEGER},
          </if>
          <if test="record.thirdId != null">
            third_id = #{record.thirdId,jdbcType=VARCHAR},
          </if>
          <if test="record.operUrl != null">
            oper_url = #{record.operUrl,jdbcType=VARCHAR},
          </if>
          <if test="record.operIp != null">
            oper_ip = #{record.operIp,jdbcType=VARCHAR},
          </if>
          <if test="record.operLocation != null">
            oper_location = #{record.operLocation,jdbcType=VARCHAR},
          </if>
          <if test="record.operParam != null">
            oper_param = #{record.operParam,jdbcType=VARCHAR},
          </if>
          <if test="record.jsonResult != null">
            json_result = #{record.jsonResult,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            status = #{record.status,jdbcType=INTEGER},
          </if>
          <if test="record.errorMsg != null">
            error_msg = #{record.errorMsg,jdbcType=VARCHAR},
          </if>
          <if test="record.operTime != null">
            oper_time = #{record.operTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.version != null">
            version = #{record.version,jdbcType=VARCHAR},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qidao.application.entity.config.LogOper">
    update log_oper
    set title = #{title,jdbcType=VARCHAR},
      business_type = #{businessType,jdbcType=INTEGER},
      method = #{method,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      operator_type = #{operatorType,jdbcType=INTEGER},
      oper_user_id = #{operUserId,jdbcType=BIGINT},
      third_type = #{thirdType,jdbcType=INTEGER},
      third_id = #{thirdId,jdbcType=VARCHAR},
      oper_url = #{operUrl,jdbcType=VARCHAR},
      oper_ip = #{operIp,jdbcType=VARCHAR},
      oper_location = #{operLocation,jdbcType=VARCHAR},
      oper_param = #{operParam,jdbcType=VARCHAR},
      json_result = #{jsonResult,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      error_msg = #{errorMsg,jdbcType=VARCHAR},
      oper_time = #{operTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      version = #{version,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.qidao.application.entity.config.LogOperExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from log_oper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    insert into log_oper
    (id, title, business_type, method, request_method, operator_type, oper_user_id, third_type, 
      third_id, oper_url, oper_ip, oper_location, oper_param, json_result, status, error_msg, 
      oper_time, remark, version)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.title,jdbcType=VARCHAR}, #{item.businessType,jdbcType=INTEGER}, 
        #{item.method,jdbcType=VARCHAR}, #{item.requestMethod,jdbcType=VARCHAR}, #{item.operatorType,jdbcType=INTEGER}, 
        #{item.operUserId,jdbcType=BIGINT}, #{item.thirdType,jdbcType=INTEGER}, #{item.thirdId,jdbcType=VARCHAR}, 
        #{item.operUrl,jdbcType=VARCHAR}, #{item.operIp,jdbcType=VARCHAR}, #{item.operLocation,jdbcType=VARCHAR}, 
        #{item.operParam,jdbcType=VARCHAR}, #{item.jsonResult,jdbcType=VARCHAR}, #{item.status,jdbcType=INTEGER}, 
        #{item.errorMsg,jdbcType=VARCHAR}, #{item.operTime,jdbcType=TIMESTAMP}, #{item.remark,jdbcType=VARCHAR}, 
        #{item.version,jdbcType=VARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into log_oper (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'title'.toString() == column.value">
          #{item.title,jdbcType=VARCHAR}
        </if>
        <if test="'business_type'.toString() == column.value">
          #{item.businessType,jdbcType=INTEGER}
        </if>
        <if test="'method'.toString() == column.value">
          #{item.method,jdbcType=VARCHAR}
        </if>
        <if test="'request_method'.toString() == column.value">
          #{item.requestMethod,jdbcType=VARCHAR}
        </if>
        <if test="'operator_type'.toString() == column.value">
          #{item.operatorType,jdbcType=INTEGER}
        </if>
        <if test="'oper_user_id'.toString() == column.value">
          #{item.operUserId,jdbcType=BIGINT}
        </if>
        <if test="'third_type'.toString() == column.value">
          #{item.thirdType,jdbcType=INTEGER}
        </if>
        <if test="'third_id'.toString() == column.value">
          #{item.thirdId,jdbcType=VARCHAR}
        </if>
        <if test="'oper_url'.toString() == column.value">
          #{item.operUrl,jdbcType=VARCHAR}
        </if>
        <if test="'oper_ip'.toString() == column.value">
          #{item.operIp,jdbcType=VARCHAR}
        </if>
        <if test="'oper_location'.toString() == column.value">
          #{item.operLocation,jdbcType=VARCHAR}
        </if>
        <if test="'oper_param'.toString() == column.value">
          #{item.operParam,jdbcType=VARCHAR}
        </if>
        <if test="'json_result'.toString() == column.value">
          #{item.jsonResult,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=INTEGER}
        </if>
        <if test="'error_msg'.toString() == column.value">
          #{item.errorMsg,jdbcType=VARCHAR}
        </if>
        <if test="'oper_time'.toString() == column.value">
          #{item.operTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=VARCHAR}
        </if>
        <if test="'version'.toString() == column.value">
          #{item.version,jdbcType=VARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>